;;; test_tower_self_interpreters.scm

;;; Defining tests for run-prog, run-2-prog and run-3-prog

(load "~/home/Desktop/Yale NUS stuff/Y4S1/Capstone/Scheme_Capstone/scheme_code/tower_self_interpreters.scm")
 
;;; Defining tests for run-prog

;;; normal version
(define test-run-prog
  (lambda ()
    (begin
      ;;; Testing for base values
      (unless (equal? (run-prog 0) 0)
	      (printf "failed: (run-prog 0)\n"))
      (unless (equal? (run-prog '#f) #f)
	      (printf "failed: (run-prog '#f)\n"))
      (unless (equal? (run-prog '#\f) #\f)
	      (printf "failed: (run-prog '#\f)\n"))
      (unless (equal? (run-prog "scheme_capstone") "scheme_capstone")
	      (printf "failed: (run-prog \"scheme_capstone\" )\n"))
      (unless (equal? (run-prog '()) '())
	      (printf "failed: (run-prog '())\n"))
      ;;; Testing for if expressions
      (unless (equal? (run-prog '(if #t 1 2)) 1)
	      (printf "failed: (run-prog (if #t 1 2))\n"))
      (unless (equal? (run-prog '(if #f 1 2)) 2)
	      (printf "failed: (run-prog (if #f 1 2))\n"))
      (unless (equal? (run-prog '(if 0 1 2)) 1)
	      (printf "failed: (run-prog (if 0 1 2))\n"))
      (unless (equal? (run-prog '((lambda (x) x) 1)) 1)
	      (printf "failed: (run-prog '((lambda (x) x) 1))\n"))
      ;;; Testing for lambda expressions
      (unless (equal? (run-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "failed: (run-prog '((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "failed: (run-prog ((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-prog '((lambda (x y) y) 1 2)) 2)
	      (printf "failed: (run-prog ((lambda (x y) y) 1 2))\n"))
      (unless (equal? (run-prog '((lambda xs xs) 1 2)) '(1 2))
	      (printf "failed: (run-prog '((lambda xs xs) 1 2))\n"))
      (unless (equal? (run-prog '((lambda (x . xs) xs) 1 2 3)) '(2 3))
	      (printf "failed: (run-prog '((lambda (x . xs) xs) 1 2 3))\n"))
      ;;; Testing for let expressions
      (unless (equal? (run-prog '(let () 2)) 2)
	      (printf "failed: (run-prog '(let () 2))\n"))
      (unless (equal? (run-prog '(let ((x 1)) x)) 1)
	      (printf "failed: (run-prog '(let ((x 1)) x))\n"))
      (unless (equal? (run-prog '(let ((x 1) (y 2)) x)) 1)
	      (printf "failed: (run-prog '(let ((x 1) (y 2)) x))\n"))
      (unless (equal? (run-prog '(let ((x 1) (y 2)) y)) 2)
	      (printf "failed: (run-prog '(let ((x 1) (y 2)) y))\n"))
      ;;; Testing for quote expressions and nested quote expressions
      (unless (equal? (run-prog ''(if #t 1 2)) '(if #t 1 2))
	      (printf "failed: (run-prog '('(if #t 1 2)))\n"))
      (unless (equal? (run-prog ''((lambda (x y) x) 1 2))'((lambda (x y) x) 1 2))
	      (printf "failed: (run-prog ''((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-prog '''(if #t 1 2)) ''(if #t 1 2))
	      (printf "failed: (run-prog '''(if #t 1 2))\n"))
      (unless (equal? (run-prog '''((lambda (x y) x) 1 2))''((lambda (x y) x) 1 2))
	      (printf "failed: (run-prog '''((lambda (x y) x) 1 2))\n"))
      ;;; Testing for cond expression
      (unless (equal? (run-prog '(cond (#t 3)(#f 4)(else 1))) 3)
	      (printf "failed: (run-prog '(cond (#t 3)(#f 4)(else 1)))\n"))
      (unless (equal? (run-prog '(cond (#f 3)((equal? 5 5) 4)(else 1))) 4)
	      (printf "failed: (run-prog '(cond (#f 3)((equal? 5 5) 4)(else 1)))\n"))
      (unless (equal? (run-prog '(cond (#t 3)((equal? 5 5) 4)(else 1))) 3)
	      (printf "failed: (run-prog '(cond (#t 3)((equal? 5 5) 4)(else 1)))\n"))
      (unless (equal? (run-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9))) 1)
	      (printf "failed: (run-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9)))\n"))
      (unless (equal? (run-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9)))) 90)
	      (printf "failed: (run-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9))))\n"))
      (unless (equal? (run-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9))) 9)
	      (printf "failed: (run-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9)))\n"))
      (unless (equal? (run-prog '(cond (else 2))) '2)
	      (printf "failed: (run-prog '(cond (else 2)))\n"))
      ;;; Testing for mathematical operator primitives
      (unless (equal? (run-prog '(+)) 0)
	      (printf "failed: (run-prog '(+))\n"))
      (unless (equal? (run-prog '(+ 1)) 1)
	      (printf "failed: (run-prog '(+ 1))\n"))
      (unless (equal? (run-prog '(+ 1 10)) 11)
	      (printf "failed: (run-prog '(+ 1 10))\n"))
      (unless (equal? (run-prog '(+ 1 10 100)) 111)
	      (printf "failed: (run-prog '(+ 1 10 100))\n"))
      (unless (equal? (run-prog '(- 5)) -5)
	      (printf "failed: (run-prog '(- 5))\n"))
      (unless (equal? (run-prog '(- 5 1 2)) 2)
	      (printf "failed: (run-prog '(- 5 1 2))\n"))
      (unless (equal? (run-prog '(*)) 1)
	      (printf "failed: (run-prog '(*))\n"))
      (unless (equal? (run-prog '(* 5)) 5)
	      (printf "failed: (run-prog '(* 5))\n"))
      (unless (equal? (run-prog '(* 5 2 1)) 10)
	      (printf "failed: (run-prog '(* 5 2 1))\n"))
      (unless (equal? (run-prog '(* 5 2 100 0)) 0)
	      (printf "failed: (run-prog '(* 5 2 100 0))\n"))
      (unless (equal? (run-prog '(/ 5)) 1/5)
	      (printf "failed: (run-prog '(/ 5))\n"))
      (unless (equal? (run-prog '(/ 10 5)) 2)
	      (printf "failed: (run-prog '(/ 10 5))\n"))
      (unless (equal? (run-prog '(/ 1000 20 5)) 10)
	      (printf "failed: (run-prog '(/ 1000 20 5))\n"))
      ;;; Testing for scheme list primitives
      (unless (equal? (run-prog '(car (cons 1 2))) 1)
	      (printf "failed: (run-prog '(car (cons 1 2)))\n"))
      (unless (equal? (run-prog '(cdr (cons 1 2))) '2)
	      (printf "failed: (run-prog '(cdr (cons 1 2)))\n"))
      (unless (equal? (run-prog '(car '(1 2))) 1)
	      (printf "failed: (run-prog '(car '(1 2)))\n"))
      (unless (equal? (run-prog '(cdr '(1 2))) '(2))
	      (printf "failed: (run-prog '(cdr '(1 2)))\n"))
      (unless (equal? (run-prog '(list 1 2 3)) '(1 2 3))
	      (printf "failed: (run-prog '(list 1 2 3))\n"))
      (unless (equal? (run-prog '(list (list 1 2 3))) '((1 2 3)))
	      (printf "failed: (run-prog '(list (list 1 2 3)))\n"))
      ;;; Testing for call/cc
      (unless (equal? (run-prog '(+ 5 (call/cc (lambda (k) 10)))) 15)
	      (printf "failed: (run-prog '(+ 5 (call/cc (lambda (k) 10))))\n"))
      (unless (equal? (run-prog '(+ 5 (call/cc (lambda (k) (k 10))))) 15)
	      (printf "failed: (run-prog '(+ 5 (call/cc (lambda (k) (k 10)))))\n"))
      (unless (equal? (run-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0))))) 15)
	      (printf "failed: (run-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0)))))\n"))
      (unless (equal? (run-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25)))))) 2)
	      (printf "failed: (run-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25))))))\n"))
      ;;; Testing for simple cases of apply
      (unless (equal? (run-prog '(apply + '(1 2 3))) 6)
	      (printf "failed: (run-prog '(apply + '(1 2 3)))\n"))
      (unless (equal? (run-prog '(apply (lambda (x) x) '(10))) 10)
	      (printf "failed: (run-prog '(apply (lambda (x) x) '(10)))\n"))
      (unless (equal? (run-prog '(apply * '(10 5 -1))) -50)
	      (printf "failed: (run-prog '(apply * '(10 5 -1)))\n"))
      (unless (equal? (run-prog '(apply (lambda () 1) '())) 1)
	      (printf "failed: (run-prog '(apply (lambda () 1) '()))\n"))
      ;;; Testing for more complex cases of apply
      (unless (equal? (run-prog '(apply apply (list + (list 5 3 1)))) 9)
	      (printf "failed: (run-prog '(apply apply (list + (list 5 3 1))))\n"))
      (unless (equal? (run-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20)))) 31)
	      (printf "failed: (run-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20))))\n"))
      (unless (equal? (run-prog '(+ 1 (apply call/cc (list (lambda (k) 10))))) 11)
	      (printf "failed: (run-prog '(+ 1 (apply call/cc (list (lambda (k) 10)))))\n"))
      (unless (equal? (run-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10)))))) 11)
	      (printf "failed: (run-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10))))))\n"))
      (unless (equal? (run-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0)))))) 11)
	      (printf "failed: (run-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0))))))\n"))
      ;;; Testing for letrec expressions

      ;; Testing using factorial function
      (unless (equal? (run-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5))) 120)
	      (printf "failed: (run-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5)))\n"))
      (unless (equal? (run-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7))) 5040)
	      (printf "failed: (run-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #t
      (unless (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (ternary 12))) #t)
	      (printf "failed: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 12)))\n"))
      (unless (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (preternary 5))) #t)
	      (printf "failed: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 5)))\n"))
      (unless (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (postternary 31))) #t)
	      (printf "failed: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 31)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #f
      (unless (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (ternary 10))) #f)
	      (printf "failed: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 10)))\n"))
      (unless (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (preternary 21))) #f)
	      (printf "failed: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 21)))\n"))
      (unless (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (postternary 20))) #f)
	      (printf "failed: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 20)))\n"))
      
      ;; Testing using even odd where result is expected to be #t
      (unless (equal? (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (even 10))) #t)
	      (printf "failed: (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 10)))\n"))
      (unless (equal? (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (odd 7))) #t)
	      (printf "failed: (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 7)))\n"))

      ;; Testing using even odd where result is expected to be #f
      (unless (equal? (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (even 9))) #f)
	      (printf "failed: (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 9)))\n"))
      (unless (equal? (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (odd 6))) #f)
	      (printf "failed: (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 6)))\n"))
    )))

;;; "verbose" version that prints out messages if test is fine. Hence, no error messages means that tests are NOT fine
(define test-verbose-run-prog
  (lambda ()
    (begin
      ;;; Testing for base values
      (when   (equal? (run-prog 0) 0)
	      (printf "succeeded: (run-prog 0)\n"))
      (when   (equal? (run-prog '#f) #f)
	      (printf "succeeded: (run-prog '#f)\n"))
      (when   (equal? (run-prog '#\f) #\f)
	      (printf "succeeded: (run-prog '#\f)\n"))
      (when   (equal? (run-prog "scheme_capstone") "scheme_capstone")
	      (printf "succeeded: (run-prog \"scheme_capstone\")\n"))
      (when   (equal? (run-prog '()) '())
	      (printf "succeeded: (run-prog '())\n"))
      ;;; Testing for if expressions
      (when   (equal? (run-prog '(if #t 1 2)) 1)
	      (printf "succeeded: (run-prog (if #t 1 2))\n"))
      (when   (equal? (run-prog '(if #f 1 2)) 2)
	      (printf "succeeded: (run-prog (if #f 1 2))\n"))
      (when   (equal? (run-prog '(if 0 1 2)) 1)
	      (printf "succeeded: (run-prog (if 0 1 2))\n"))
      (when   (equal? (run-prog '((lambda (x) x) 1)) 1)
	      (printf "succeeded: (run-prog '((lambda (x) x) 1))\n"))
      ;;; Testing for lambda expressions
      (when   (equal? (run-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "succeeded: (run-prog '((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "succeeded: (run-prog ((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-prog '((lambda (x y) y) 1 2)) 2)
	      (printf "succeeded: (run-prog ((lambda (x y) y) 1 2))\n"))
      (when   (equal? (run-prog '((lambda xs xs) 1 2)) '(1 2))
	      (printf "succeeded: (run-prog '((lambda xs xs) 1 2))\n"))
      (when   (equal? (run-prog '((lambda (x . xs) xs) 1 2 3)) '(2 3))
	      (printf "succeeded: (run-prog '((lambda (x . xs) xs) 1 2 3))\n"))
      ;;; Testing for let expressions
      (when   (equal? (run-prog '(let () 2)) 2)
	      (printf "succeeded: (run-prog '(let () 2))\n"))
      (when   (equal? (run-prog '(let ((x 1)) x)) 1)
	      (printf "succeeded: (run-prog '(let ((x 1)) x))\n"))
      (when   (equal? (run-prog '(let ((x 1) (y 2)) x)) 1)
	      (printf "succeeded: (run-prog '(let ((x 1) (y 2)) x))\n"))
      (when   (equal? (run-prog '(let ((x 1) (y 2)) y)) 2)
	      (printf "succeeded: (run-prog '(let ((x 1) (y 2)) y))\n"))
      ;;; Testing for quote expressions and nested quote expressions
      (when   (equal? (run-prog ''(if #t 1 2)) '(if #t 1 2))
	      (printf "succeeded: (run-prog '('(if #t 1 2)))\n"))
      (when   (equal? (run-prog ''((lambda (x y) x) 1 2))'((lambda (x y) x) 1 2))
	      (printf "succeeded: (run-prog ''((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-prog '''(if #t 1 2)) ''(if #t 1 2))
	      (printf "succeeded: (run-prog '''(if #t 1 2))\n"))
      (when   (equal? (run-prog '''((lambda (x y) x) 1 2))''((lambda (x y) x) 1 2))
	      (printf "succeeded: (run-prog '''((lambda (x y) x) 1 2))\n"))
      ;;; Testing for cond expression
      (when   (equal? (run-prog '(cond (#t 3)(#f 4)(else 1))) 3)
	      (printf "succeeded: (run-prog '(cond (#t 3)(#f 4)(else 1)))\n"))
      (when   (equal? (run-prog '(cond (#f 3)((equal? 5 5) 4)(else 1))) 4)
	      (printf "succeeded: (run-prog '(cond (#f 3)((equal? 5 5) 4)(else 1)))\n"))
      (when   (equal? (run-prog '(cond (#t 3)((equal? 5 5) 4)(else 1))) 3)
	      (printf "succeeded: (run-prog '(cond (#t 3)((equal? 5 5) 4)(else 1)))\n"))
      (when   (equal? (run-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9))) 1)
	      (printf "succeeded: (run-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9)))\n"))
      (when   (equal? (run-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9)))) 90)
	      (printf "succeeded: (run-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9))))\n"))
      (when   (equal? (run-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9))) 9)
	      (printf "succeeded: (run-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9)))\n"))
      (when   (equal? (run-prog '(cond (else 2))) '2)
	      (printf "succeeded: (run-prog '(cond (else 2)))\n"))
      ;;; Testing for mathematical operator primitives
      (when   (equal? (run-prog '(+)) 0)
	      (printf "succeeded: (run-prog '(+))\n"))
      (when   (equal? (run-prog '(+ 1)) 1)
	      (printf "succeeded: (run-prog '(+ 1))\n"))
      (when   (equal? (run-prog '(+ 1 10)) 11)
	      (printf "succeeded: (run-prog '(+ 1 10))\n"))
      (when   (equal? (run-prog '(+ 1 10 100)) 111)
	      (printf "succeeded: (run-prog '(+ 1 10 100))\n"))
      (when   (equal? (run-prog '(- 5)) -5)
	      (printf "succeeded: (run-prog '(- 5))\n"))
      (when   (equal? (run-prog '(- 5 1 2)) 2)
	      (printf "succeeded: (run-prog '(- 5 1 2))\n"))
      (when   (equal? (run-prog '(*)) 1)
	      (printf "succeeded: (run-prog '(*))\n"))
      (when   (equal? (run-prog '(* 5)) 5)
	      (printf "succeeded: (run-prog '(* 5))\n"))
      (when   (equal? (run-prog '(* 5 2 1)) 10)
	      (printf "succeeded: (run-prog '(* 5 2 1))\n"))
      (when   (equal? (run-prog '(* 5 2 100 0)) 0)
	      (printf "succeeded: (run-prog '(* 5 2 100 0))\n"))
      (when   (equal? (run-prog '(/ 5)) 1/5)
	      (printf "succeeded: (run-prog '(/ 5))\n"))
      (when   (equal? (run-prog '(/ 10 5)) 2)
	      (printf "succeeded: (run-prog '(/ 10 5))\n"))
      (when   (equal? (run-prog '(/ 1000 20 5)) 10)
	      (printf "succeeded: (run-prog '(/ 1000 20 5))\n"))
      ;;; Testing for scheme list primitives
      (when   (equal? (run-prog '(car (cons 1 2))) 1)
	      (printf "succeeded: (run-prog '(car (cons 1 2)))\n"))
      (when   (equal? (run-prog '(cdr (cons 1 2))) '2)
	      (printf "succeeded: (run-prog '(cdr (cons 1 2)))\n"))
      (when   (equal? (run-prog '(car '(1 2))) 1)
	      (printf "succeeded: (run-prog '(car '(1 2)))\n"))
      (when   (equal? (run-prog '(cdr '(1 2))) '(2))
	      (printf "succeeded: (run-prog '(cdr '(1 2)))\n"))
      (when   (equal? (run-prog '(list 1 2 3)) '(1 2 3))
	      (printf "succeeded: (run-prog '(list 1 2 3))\n"))
      (when   (equal? (run-prog '(list (list 1 2 3))) '((1 2 3)))
	      (printf "succeeded: (run-prog '(list (list 1 2 3)))\n"))
      ;;; Testing for call/cc
      (when   (equal? (run-prog '(+ 5 (call/cc (lambda (k) 10)))) 15)
	      (printf "succeeded: (run-prog '(+ 5 (call/cc (lambda (k) 10))))\n"))
      (when   (equal? (run-prog '(+ 5 (call/cc (lambda (k) (k 10))))) 15)
	      (printf "succeeded: (run-prog '(+ 5 (call/cc (lambda (k) (k 10)))))\n"))
      (when   (equal? (run-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0))))) 15)
	      (printf "succeeded: (run-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0)))))\n"))
      (when   (equal? (run-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25)))))) 2)
	      (printf "succeeded: (run-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25))))))\n"))
      ;;; Testing for simple cases of apply
      (when   (equal? (run-prog '(apply + '(1 2 3))) 6)
	      (printf "succeeded: (run-prog '(apply + '(1 2 3)))\n"))
      (when   (equal? (run-prog '(apply (lambda (x) x) '(10))) 10)
	      (printf "succeeded: (run-prog '(apply (lambda (x) x) '(10)))\n"))
      (when   (equal? (run-prog '(apply * '(10 5 -1))) -50)
	      (printf "succeeded: (run-prog '(apply * '(10 5 -1)))\n"))
      (when   (equal? (run-prog '(apply (lambda () 1) '())) 1)
	      (printf "succeeded: (run-prog '(apply (lambda () 1) '()))\n"))
      ;;; Testing for more complex cases of apply
      (when   (equal? (run-prog '(apply apply (list + (list 5 3 1)))) 9)
	      (printf "succeeded: (run-prog '(apply apply (list + (list 5 3 1))))\n"))
      (when   (equal? (run-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20)))) 31)
	      (printf "succeeded: (run-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20))))\n"))
      (when   (equal? (run-prog '(+ 1 (apply call/cc (list (lambda (k) 10))))) 11)
	      (printf "succeeded: (run-prog '(+ 1 (apply call/cc (list (lambda (k) 10)))))\n"))
      (when   (equal? (run-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10)))))) 11)
	      (printf "succeeded: (run-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10))))))\n"))
      (when   (equal? (run-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0)))))) 11)
	      (printf "succeeded: (run-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0))))))\n"))
      ;;; Testing for letrec expressions

      ;; Testing using factorial function
      (when   (equal? (run-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5))) 120)
	      (printf "succeeded: (run-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5)))\n"))
      (when   (equal? (run-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7))) 5040)
	      (printf "succeeded: (run-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #t
      (when   (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (ternary 12))) #t)
	      (printf "succeeded: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 12)))\n"))
      (when   (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (preternary 5))) #t)
	      (printf "succeeded: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 5)))\n"))
      (when   (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (postternary 31))) #t)
	      (printf "succeeded: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 31)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #f
      (when   (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (ternary 10))) #f)
	      (printf "succeeded: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 10)))\n"))
      (when   (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (preternary 21))) #f)
	      (printf "succeeded: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 21)))\n"))
      (when   (equal? (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					  (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					  (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				   (postternary 20))) #f)
	      (printf "succeeded: (run-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 20)))\n"))

      ;; Testing using even odd where result is expected to be #t
      (when   (equal? (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (even 10))) #t)
	      (printf "succeeded: (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 10)))\n"))
      (when   (equal? (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (odd 7))) #t)
	      (printf "succeeded: (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 7)))\n"))

      ;; Testing using even odd where result is expected to be #f
      (when (equal? (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					(odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				 (even 9))) #f)
	    (printf "succeeded: (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 9)))\n"))
      (when (equal? (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					(odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				 (odd 6))) #f)
	    (printf "succeeded: (run-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 6)))\n"))
      )))


;;; Defining tests for run-2-prog

;;; normal version
(define test-run-2-prog
  (lambda ()
    (begin
      ;;; Testing for base values
      (unless (equal? (run-2-prog 0) 0)
	      (printf "failed: (run-2-prog 0)\n"))
      (unless (equal? (run-2-prog '#f) #f)
	      (printf "failed: (run-2-prog '#f)\n"))
      (unless (equal? (run-2-prog '#\f) #\f)
	      (printf "failed: (run-2-prog '#\f)\n"))
      (unless (equal? (run-2-prog "scheme_capstone") "scheme_capstone")
	      (printf "failed: (run-2-prog \"scheme_capstone\")\n"))
      (unless (equal? (run-2-prog '()) '())
	      (printf "failed: (run-2-prog '())\n"))
      ;;; Testing for if expressions
      (unless (equal? (run-2-prog '(if #t 1 2)) 1)
	      (printf "failed: (run-2-prog (if #t 1 2))\n"))
      (unless (equal? (run-2-prog '(if #f 1 2)) 2)
	      (printf "failed: (run-2-prog (if #f 1 2))\n"))
      (unless (equal? (run-2-prog '(if 0 1 2)) 1)
	      (printf "failed: (run-2-prog (if 0 1 2))\n"))
      (unless (equal? (run-2-prog '((lambda (x) x) 1)) 1)
	      (printf "failed: (run-2-prog '((lambda (x) x) 1))\n"))
      ;;; Testing for lambda expressions
      (unless (equal? (run-2-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "failed: (run-2-prog '((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-2-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "failed: (run-2-prog ((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-2-prog '((lambda (x y) y) 1 2)) 2)
	      (printf "failed: (run-2-prog ((lambda (x y) y) 1 2))\n"))
      (unless (equal? (run-2-prog '((lambda xs xs) 1 2)) '(1 2))
	      (printf "failed: (run-2-prog '((lambda xs xs) 1 2))\n"))
      (unless (equal? (run-2-prog '((lambda (x . xs) xs) 1 2 3)) '(2 3))
	      (printf "failed: (run-2-prog '((lambda (x . xs) xs) 1 2 3))\n"))
      ;;; Testing for let expressions
      (unless (equal? (run-2-prog '(let () 2)) 2)
	      (printf "failed: (run-2-prog '(let () 2))\n"))
      (unless (equal? (run-2-prog '(let ((x 1)) x)) 1)
	      (printf "failed: (run-2-prog '(let ((x 1)) x))\n"))
      (unless (equal? (run-2-prog '(let ((x 1) (y 2)) x)) 1)
	      (printf "failed: (run-2-prog '(let ((x 1) (y 2)) x))\n"))
      (unless (equal? (run-2-prog '(let ((x 1) (y 2)) y)) 2)
	      (printf "failed: (run-2-prog '(let ((x 1) (y 2)) y))\n"))
      ;;; Testing for quote expressions and nested quote expressions
      (unless (equal? (run-2-prog ''(if #t 1 2)) '(if #t 1 2))
	      (printf "failed: (run-2-prog '('(if #t 1 2)))\n"))
      (unless (equal? (run-2-prog ''((lambda (x y) x) 1 2))'((lambda (x y) x) 1 2))
	      (printf "failed: (run-2-prog ''((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-2-prog '''(if #t 1 2)) ''(if #t 1 2))
	      (printf "failed: (run-2-prog '''(if #t 1 2))\n"))
      (unless (equal? (run-2-prog '''((lambda (x y) x) 1 2))''((lambda (x y) x) 1 2))
	      (printf "failed: (run-2-prog '''((lambda (x y) x) 1 2))\n"))
      ;;; Testing for cond expression
      (unless (equal? (run-2-prog '(cond (#t 3)(#f 4)(else 1))) 3)
	      (printf "failed: (run-2-prog '(cond (#t 3)(#f 4)(else 1)))\n"))
      (unless (equal? (run-2-prog '(cond (#f 3)((equal? 5 5) 4)(else 1))) 4)
	      (printf "failed: (run-2-prog '(cond (#f 3)((equal? 5 5) 4)(else 1)))\n"))
      (unless (equal? (run-2-prog '(cond (#t 3)((equal? 5 5) 4)(else 1))) 3)
	      (printf "failed: (run-2-prog '(cond (#t 3)((equal? 5 5) 4)(else 1)))\n"))
      (unless (equal? (run-2-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9))) 1)
	      (printf "failed: (run-2-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9)))\n"))
      (unless (equal? (run-2-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9)))) 90)
	      (printf "failed: (run-2-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9))))\n"))
      (unless (equal? (run-2-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9))) 9)
	      (printf "failed: (run-2-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9)))\n"))
      (unless (equal? (run-2-prog '(cond (else 2))) '2)
	      (printf "failed: (run-2-prog '(cond (else 2)))\n"))
      ;;; Testing for mathematical operator primitives
      (unless (equal? (run-2-prog '(+)) 0)
	      (printf "failed: (run-2-prog '(+))\n"))
      (unless (equal? (run-2-prog '(+ 1)) 1)
	      (printf "failed: (run-2-prog '(+ 1))\n"))
      (unless (equal? (run-2-prog '(+ 1 10)) 11)
	      (printf "failed: (run-2-prog '(+ 1 10))\n"))
      (unless (equal? (run-2-prog '(+ 1 10 100)) 111)
	      (printf "failed: (run-2-prog '(+ 1 10 100))\n"))
      (unless (equal? (run-2-prog '(- 5)) -5)
	      (printf "failed: (run-2-prog '(- 5))\n"))
      (unless (equal? (run-2-prog '(- 5 1 2)) 2)
	      (printf "failed: (run-2-prog '(- 5 1 2))\n"))
      (unless (equal? (run-2-prog '(*)) 1)
	      (printf "failed: (run-2-prog '(*))\n"))
      (unless (equal? (run-2-prog '(* 5)) 5)
	      (printf "failed: (run-2-prog '(* 5))\n"))
      (unless (equal? (run-2-prog '(* 5 2 1)) 10)
	      (printf "failed: (run-2-prog '(* 5 2 1))\n"))
      (unless (equal? (run-2-prog '(* 5 2 100 0)) 0)
	      (printf "failed: (run-2-prog '(* 5 2 100 0))\n"))
      (unless (equal? (run-2-prog '(/ 5)) 1/5)
	      (printf "failed: (run-2-prog '(/ 5))\n"))
      (unless (equal? (run-2-prog '(/ 10 5)) 2)
	      (printf "failed: (run-2-prog '(/ 10 5))\n"))
      (unless (equal? (run-2-prog '(/ 1000 20 5)) 10)
	      (printf "failed: (run-2-prog '(/ 1000 20 5))\n"))
      ;;; Testing for scheme list primitives
      (unless (equal? (run-2-prog '(car (cons 1 2))) 1)
	      (printf "failed: (run-2-prog '(car (cons 1 2)))\n"))
      (unless (equal? (run-2-prog '(cdr (cons 1 2))) '2)
	      (printf "failed: (run-2-prog '(cdr (cons 1 2)))\n"))
      (unless (equal? (run-2-prog '(car '(1 2))) 1)
	      (printf "failed: (run-2-prog '(car '(1 2)))\n"))
      (unless (equal? (run-2-prog '(cdr '(1 2))) '(2))
	      (printf "failed: (run-2-prog '(cdr '(1 2)))\n"))
      (unless (equal? (run-2-prog '(list 1 2 3)) '(1 2 3))
	      (printf "failed: (run-2-prog '(list 1 2 3))\n"))
      (unless (equal? (run-2-prog '(list (list 1 2 3))) '((1 2 3)))
	      (printf "failed: (run-2-prog '(list (list 1 2 3)))\n"))
      ;;; Testing for call/cc
      (unless (equal? (run-2-prog '(+ 5 (call/cc (lambda (k) 10)))) 15)
	      (printf "failed: (run-2-prog '(+ 5 (call/cc (lambda (k) 10))))\n"))
      (unless (equal? (run-2-prog '(+ 5 (call/cc (lambda (k) (k 10))))) 15)
	      (printf "failed: (run-2-prog '(+ 5 (call/cc (lambda (k) (k 10)))))\n"))
      (unless (equal? (run-2-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0))))) 15)
	      (printf "failed: (run-2-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0)))))\n"))
      (unless (equal? (run-2-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25)))))) 2)
	      (printf "failed: (run-2-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25))))))\n"))
      ;;; Testing for simple cases of apply
      (unless (equal? (run-2-prog '(apply + '(1 2 3))) 6)
	      (printf "failed: (run-2-prog '(apply + '(1 2 3)))\n"))
      (unless (equal? (run-2-prog '(apply (lambda (x) x) '(10))) 10)
	      (printf "failed: (run-2-prog '(apply (lambda (x) x) '(10)))\n"))
      (unless (equal? (run-2-prog '(apply * '(10 5 -1))) -50)
	      (printf "failed: (run-2-prog '(apply * '(10 5 -1)))\n"))
      (unless (equal? (run-2-prog '(apply (lambda () 1) '())) 1)
	      (printf "failed: (run-2-prog '(apply (lambda () 1) '()))\n"))
      ;;; Testing for more complex cases of apply
      (unless (equal? (run-2-prog '(apply apply (list + (list 5 3 1)))) 9)
	      (printf "failed: (run-2-prog '(apply apply (list + (list 5 3 1))))\n"))
      (unless (equal? (run-2-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20)))) 31)
	      (printf "failed: (run-2-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20))))\n"))
      (unless (equal? (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) 10))))) 11)
	      (printf "failed: (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) 10)))))\n"))
      (unless (equal? (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10)))))) 11)
	      (printf "failed: (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10))))))\n"))
      (unless (equal? (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0)))))) 11)
	      (printf "failed: (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0))))))\n"))
      ;;; Testing for letrec expressions

      ;; Testing using factorial function
      (unless (equal? (run-2-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5))) 120)
	      (printf "failed: (run-2-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5)))\n"))
      (unless (equal? (run-2-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7))) 5040)
	      (printf "failed: (run-2-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #t
      (unless (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 12))) #t)
	      (printf "failed: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 12)))\n"))
      (unless (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 5))) #t)
	      (printf "failed: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 5)))\n"))
      (unless (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 31))) #t)
	      (printf "failed: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 31)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #f
      (unless (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 10))) #f)
	      (printf "failed: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 10)))\n"))
      (unless (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 21))) #f)
	      (printf "failed: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 21)))\n"))
      (unless (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 20))) #f)
	      (printf "failed: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 20)))\n"))
      
      ;; Testing using even odd where result is expected to be #t
      (unless (equal? (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (even 10))) #t)
	      (printf "failed: (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 10)))\n"))
      (unless (equal? (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (odd 7))) #t)
	      (printf "failed: (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 7)))\n"))

      ;; Testing using even odd where result is expected to be #f
      (unless (equal? (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (even 9))) #f)
	      (printf "failed: (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 9)))\n"))
      (unless (equal? (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (odd 6))) #f)
	      (printf "failed: (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 6)))\n"))
      )))

;;; "verbose" version that prints out messages if test is fine. Hence, no error messages means that tests are NOT fine
(define test-verbose-run-2-prog
  (lambda ()
    (begin
      ;;; Testing for base values
      (when   (equal? (run-2-prog 0) 0)
	      (printf "succeeded: (run-2-prog 0)\n"))
      (when   (equal? (run-2-prog '#f) #f)
	      (printf "succeeded: (run-2-prog '#f)\n"))
      (when   (equal? (run-2-prog '#\f) #\f)
	      (printf "succeeded: (run-2-prog '#\f)\n"))
      (when   (equal? (run-2-prog "scheme_capstone") "scheme_capstone")
	      (printf "succeeded: (run-2-prog \"scheme_capstone\")\n"))
      (when   (equal? (run-2-prog '()) '())
	      (printf "succeeded: (run-2-prog '())\n"))
      ;;; Testing for if expressions
      (when   (equal? (run-2-prog '(if #t 1 2)) 1)
	      (printf "succeeded: (run-2-prog (if #t 1 2))\n"))
      (when   (equal? (run-2-prog '(if #f 1 2)) 2)
	      (printf "succeeded: (run-2-prog (if #f 1 2))\n"))
      (when   (equal? (run-2-prog '(if 0 1 2)) 1)
	      (printf "succeeded: (run-2-prog (if 0 1 2))\n"))
      (when   (equal? (run-2-prog '((lambda (x) x) 1)) 1)
	      (printf "succeeded: (run-2-prog '((lambda (x) x) 1))\n"))
      ;;; Testing for lambda expressions
      (when   (equal? (run-2-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "succeeded: (run-2-prog '((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-2-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "succeeded: (run-2-prog ((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-2-prog '((lambda (x y) y) 1 2)) 2)
	      (printf "succeeded: (run-2-prog ((lambda (x y) y) 1 2))\n"))
      (when   (equal? (run-2-prog '((lambda xs xs) 1 2)) '(1 2))
	      (printf "succeeded: (run-2-prog '((lambda xs xs) 1 2))\n"))
      (when   (equal? (run-2-prog '((lambda (x . xs) xs) 1 2 3)) '(2 3))
	      (printf "succeeded: (run-2-prog '((lambda (x . xs) xs) 1 2 3))\n"))
      ;;; Testing for let expressions
      (when   (equal? (run-2-prog '(let () 2)) 2)
	      (printf "succeeded: (run-2-prog '(let () 2))\n"))
      (when   (equal? (run-2-prog '(let ((x 1)) x)) 1)
	      (printf "succeeded: (run-2-prog '(let ((x 1)) x))\n"))
      (when   (equal? (run-2-prog '(let ((x 1) (y 2)) x)) 1)
	      (printf "succeeded: (run-2-prog '(let ((x 1) (y 2)) x))\n"))
      (when   (equal? (run-2-prog '(let ((x 1) (y 2)) y)) 2)
	      (printf "succeeded: (run-2-prog '(let ((x 1) (y 2)) y))\n"))
      ;;; Testing for quote expressions and nested quote expressions
      (when   (equal? (run-2-prog ''(if #t 1 2)) '(if #t 1 2))
	      (printf "succeeded: (run-2-prog '('(if #t 1 2)))\n"))
      (when   (equal? (run-2-prog ''((lambda (x y) x) 1 2))'((lambda (x y) x) 1 2))
	      (printf "succeeded: (run-2-prog ''((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-2-prog '''(if #t 1 2)) ''(if #t 1 2))
	      (printf "succeeded: (run-2-prog '''(if #t 1 2))\n"))
      (when   (equal? (run-2-prog '''((lambda (x y) x) 1 2))''((lambda (x y) x) 1 2))
	      (printf "succeeded: (run-2-prog '''((lambda (x y) x) 1 2))\n"))
      ;;; Testing for cond expression
      (when   (equal? (run-2-prog '(cond (#t 3)(#f 4)(else 1))) 3)
	      (printf "succeeded: (run-2-prog '(cond (#t 3)(#f 4)(else 1)))\n"))
      (when   (equal? (run-2-prog '(cond (#f 3)((equal? 5 5) 4)(else 1))) 4)
	      (printf "succeeded: (run-2-prog '(cond (#f 3)((equal? 5 5) 4)(else 1)))\n"))
      (when   (equal? (run-2-prog '(cond (#t 3)((equal? 5 5) 4)(else 1))) 3)
	      (printf "succeeded: (run-2-prog '(cond (#t 3)((equal? 5 5) 4)(else 1)))\n"))
      (when   (equal? (run-2-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9))) 1)
	      (printf "succeeded: (run-2-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9)))\n"))
      (when   (equal? (run-2-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9)))) 90)
	      (printf "succeeded: (run-2-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9))))\n"))
      (when   (equal? (run-2-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9))) 9)
	      (printf "succeeded: (run-2-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9)))\n"))
      (when   (equal? (run-2-prog '(cond (else 2))) '2)
	      (printf "succeeded: (run-2-prog '(cond (else 2)))\n"))
      ;;; Testing for mathematical operator primitives
      (when   (equal? (run-2-prog '(+)) 0)
	      (printf "succeeded: (run-2-prog '(+))\n"))
      (when   (equal? (run-2-prog '(+ 1)) 1)
	      (printf "succeeded: (run-2-prog '(+ 1))\n"))
      (when   (equal? (run-2-prog '(+ 1 10)) 11)
	      (printf "succeeded: (run-2-prog '(+ 1 10))\n"))
      (when   (equal? (run-2-prog '(+ 1 10 100)) 111)
	      (printf "succeeded: (run-2-prog '(+ 1 10 100))\n"))
      (when   (equal? (run-2-prog '(- 5)) -5)
	      (printf "succeeded: (run-2-prog '(- 5))\n"))
      (when   (equal? (run-2-prog '(- 5 1 2)) 2)
	      (printf "succeeded: (run-2-prog '(- 5 1 2))\n"))
      (when   (equal? (run-2-prog '(*)) 1)
	      (printf "succeeded: (run-2-prog '(*))\n"))
      (when   (equal? (run-2-prog '(* 5)) 5)
	      (printf "succeeded: (run-2-prog '(* 5))\n"))
      (when   (equal? (run-2-prog '(* 5 2 1)) 10)
	      (printf "succeeded: (run-2-prog '(* 5 2 1))\n"))
      (when   (equal? (run-2-prog '(* 5 2 100 0)) 0)
	      (printf "succeeded: (run-2-prog '(* 5 2 100 0))\n"))
      (when   (equal? (run-2-prog '(/ 5)) 1/5)
	      (printf "succeeded: (run-2-prog '(/ 5))\n"))
      (when   (equal? (run-2-prog '(/ 10 5)) 2)
	      (printf "succeeded: (run-2-prog '(/ 10 5))\n"))
      (when   (equal? (run-2-prog '(/ 1000 20 5)) 10)
	      (printf "succeeded: (run-2-prog '(/ 1000 20 5))\n"))
      ;;; Testing for scheme list primitives
      (when   (equal? (run-2-prog '(car (cons 1 2))) 1)
	      (printf "succeeded: (run-2-prog '(car (cons 1 2)))\n"))
      (when   (equal? (run-2-prog '(cdr (cons 1 2))) '2)
	      (printf "succeeded: (run-2-prog '(cdr (cons 1 2)))\n"))
      (when   (equal? (run-2-prog '(car '(1 2))) 1)
	      (printf "succeeded: (run-2-prog '(car '(1 2)))\n"))
      (when   (equal? (run-2-prog '(cdr '(1 2))) '(2))
	      (printf "succeeded: (run-2-prog '(cdr '(1 2)))\n"))
      (when   (equal? (run-2-prog '(list 1 2 3)) '(1 2 3))
	      (printf "succeeded: (run-2-prog '(list 1 2 3))\n"))
      (when   (equal? (run-2-prog '(list (list 1 2 3))) '((1 2 3)))
	      (printf "succeeded: (run-2-prog '(list (list 1 2 3)))\n"))
      ;;; Testing for call/cc
      (when   (equal? (run-2-prog '(+ 5 (call/cc (lambda (k) 10)))) 15)
	      (printf "succeeded: (run-2-prog '(+ 5 (call/cc (lambda (k) 10))))\n"))
      (when   (equal? (run-2-prog '(+ 5 (call/cc (lambda (k) (k 10))))) 15)
	      (printf "succeeded: (run-2-prog '(+ 5 (call/cc (lambda (k) (k 10)))))\n"))
      (when   (equal? (run-2-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0))))) 15)
	      (printf "succeeded: (run-2-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0)))))\n"))
      (when   (equal? (run-2-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25)))))) 2)
	      (printf "succeeded: (run-2-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25))))))\n"))
      ;;; Testing for simple cases of apply
      (when   (equal? (run-2-prog '(apply + '(1 2 3))) 6)
	      (printf "succeeded: (run-2-prog '(apply + '(1 2 3)))\n"))
      (when   (equal? (run-2-prog '(apply (lambda (x) x) '(10))) 10)
	      (printf "succeeded: (run-2-prog '(apply (lambda (x) x) '(10)))\n"))
      (when   (equal? (run-2-prog '(apply * '(10 5 -1))) -50)
	      (printf "succeeded: (run-2-prog '(apply * '(10 5 -1)))\n"))
      (when   (equal? (run-2-prog '(apply (lambda () 1) '())) 1)
	      (printf "succeeded: (run-2-prog '(apply (lambda () 1) '()))\n"))
      ;;; Testing for more complex cases of apply
      (when   (equal? (run-2-prog '(apply apply (list + (list 5 3 1)))) 9)
	      (printf "succeeded: (run-2-prog '(apply apply (list + (list 5 3 1))))\n"))
      (when   (equal? (run-2-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20)))) 31)
	      (printf "succeeded: (run-2-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20))))\n"))
      (when   (equal? (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) 10))))) 11)
	      (printf "succeeded: (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) 10)))))\n"))
      (when   (equal? (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10)))))) 11)
	      (printf "succeeded: (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10))))))\n"))
      (when   (equal? (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0)))))) 11)
	      (printf "succeeded: (run-2-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0))))))\n"))
      ;;; Testing for letrec expressions

      ;; Testing using factorial function
      (when   (equal? (run-2-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5))) 120)
	      (printf "succeeded: (run-2-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5)))\n"))
      (when   (equal? (run-2-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7))) 5040)
	      (printf "succeeded: (run-2-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #t
      (when   (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 12))) #t)
	      (printf "succeeded: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 12)))\n"))
      (when   (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 5))) #t)
	      (printf "succeeded: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 5)))\n"))
      (when   (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 31))) #t)
	      (printf "succeeded: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 31)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #f
      (when   (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 10))) #f)
	      (printf "succeeded: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 10)))\n"))
      (when   (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 21))) #f)
	      (printf "succeeded: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 21)))\n"))
      (when   (equal? (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 20))) #f)
	      (printf "succeeded: (run-2-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 20)))\n"))

      ;; Testing using even odd where result is expected to be #t
      (when   (equal? (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (even 10))) #t)
	      (printf "succeeded: (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 10)))\n"))
      (when   (equal? (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (odd 7))) #t)
	      (printf "succeeded: (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 7)))\n"))

      ;; Testing using even odd where result is expected to be #f
      (when (equal? (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (even 9))) #f)
	    (printf "succeeded: (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 9)))\n"))
      (when (equal? (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (odd 6))) #f)
	    (printf "succeeded: (run-2-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 6)))\n"))
      )))

;;; Defining tests for run-3-prog

;;; normal version
(define test-run-3-prog
  (lambda ()
    (begin
      ;;; Testing for base values
      (unless (equal? (run-3-prog 0) 0)
	      (printf "failed: (run-3-prog 0)\n"))
      (unless (equal? (run-3-prog '#f) #f)
	      (printf "failed: (run-3-prog '#f)\n"))
      (unless (equal? (run-3-prog '#\f) #\f)
	      (printf "failed: (run-3-prog '#\f)\n"))
      (unless (equal? (run-3-prog "scheme_capstone") "scheme_capstone")
	      (printf "failed: (run-3-prog \"scheme_capstone\")\n"))
      (unless (equal? (run-3-prog '()) '())
	      (printf "failed: (run-3-prog '())\n"))
      ;;; Testing for if expressions
      (unless (equal? (run-3-prog '(if #t 1 2)) 1)
	      (printf "failed: (run-3-prog (if #t 1 2))\n"))
      (unless (equal? (run-3-prog '(if #f 1 2)) 2)
	      (printf "failed: (run-3-prog (if #f 1 2))\n"))
      (unless (equal? (run-3-prog '(if 0 1 2)) 1)
	      (printf "failed: (run-3-prog (if 0 1 2))\n"))
      (unless (equal? (run-3-prog '((lambda (x) x) 1)) 1)
	      (printf "failed: (run-3-prog '((lambda (x) x) 1))\n"))
      ;;; Testing for lambda expressions
      (unless (equal? (run-3-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "failed: (run-3-prog '((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-3-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "failed: (run-3-prog ((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-3-prog '((lambda (x y) y) 1 2)) 2)
	      (printf "failed: (run-3-prog ((lambda (x y) y) 1 2))\n"))
      (unless (equal? (run-3-prog '((lambda xs xs) 1 2)) '(1 2))
	      (printf "failed: (run-3-prog '((lambda xs xs) 1 2))\n"))
      (unless (equal? (run-3-prog '((lambda (x . xs) xs) 1 2 3)) '(2 3))
	      (printf "failed: (run-3-prog '((lambda (x . xs) xs) 1 2 3))\n"))
      ;;; Testing for let expressions
      (unless (equal? (run-3-prog '(let () 2)) 2)
	      (printf "failed: (run-3-prog '(let () 2))\n"))
      (unless (equal? (run-3-prog '(let ((x 1)) x)) 1)
	      (printf "failed: (run-3-prog '(let ((x 1)) x))\n"))
      (unless (equal? (run-3-prog '(let ((x 1) (y 2)) x)) 1)
	      (printf "failed: (run-3-prog '(let ((x 1) (y 2)) x))\n"))
      (unless (equal? (run-3-prog '(let ((x 1) (y 2)) y)) 2)
	      (printf "failed: (run-3-prog '(let ((x 1) (y 2)) y))\n"))
      ;;; Testing for quote expressions and nested quote expressions
      (unless (equal? (run-3-prog ''(if #t 1 2)) '(if #t 1 2))
	      (printf "failed: (run-3-prog '('(if #t 1 2)))\n"))
      (unless (equal? (run-3-prog ''((lambda (x y) x) 1 2))'((lambda (x y) x) 1 2))
	      (printf "failed: (run-3-prog ''((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-3-prog '''(if #t 1 2)) ''(if #t 1 2))
	      (printf "failed: (run-3-prog '''(if #t 1 2))\n"))
      (unless (equal? (run-3-prog '''((lambda (x y) x) 1 2))''((lambda (x y) x) 1 2))
	      (printf "failed: (run-3-prog '''((lambda (x y) x) 1 2))\n"))
      ;;; Testing for cond expression
      (unless (equal? (run-3-prog '(cond (#t 3)(#f 4)(else 1))) 3)
	      (printf "failed: (run-3-prog '(cond (#t 3)(#f 4)(else 1)))\n"))
      (unless (equal? (run-3-prog '(cond (#f 3)((equal? 5 5) 4)(else 1))) 4)
	      (printf "failed: (run-3-prog '(cond (#f 3)((equal? 5 5) 4)(else 1)))\n"))
      (unless (equal? (run-3-prog '(cond (#t 3)((equal? 5 5) 4)(else 1))) 3)
	      (printf "failed: (run-3-prog '(cond (#t 3)((equal? 5 5) 4)(else 1)))\n"))
      (unless (equal? (run-3-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9))) 1)
	      (printf "failed: (run-3-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9)))\n"))
      (unless (equal? (run-3-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9)))) 90)
	      (printf "failed: (run-3-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9))))\n"))
      (unless (equal? (run-3-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9))) 9)
	      (printf "failed: (run-3-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9)))\n"))
      (unless (equal? (run-3-prog '(cond (else 2))) '2)
	      (printf "failed: (run-3-prog '(cond (else 2)))\n"))
      ;;; Testing for mathematical operator primitives
      (unless (equal? (run-3-prog '(+)) 0)
	      (printf "failed: (run-3-prog '(+))\n"))
      (unless (equal? (run-3-prog '(+ 1)) 1)
	      (printf "failed: (run-3-prog '(+ 1))\n"))
      (unless (equal? (run-3-prog '(+ 1 10)) 11)
	      (printf "failed: (run-3-prog '(+ 1 10))\n"))
      (unless (equal? (run-3-prog '(+ 1 10 100)) 111)
	      (printf "failed: (run-3-prog '(+ 1 10 100))\n"))
      (unless (equal? (run-3-prog '(- 5)) -5)
	      (printf "failed: (run-3-prog '(- 5))\n"))
      (unless (equal? (run-3-prog '(- 5 1 2)) 2)
	      (printf "failed: (run-3-prog '(- 5 1 2))\n"))
      (unless (equal? (run-3-prog '(*)) 1)
	      (printf "failed: (run-3-prog '(*))\n"))
      (unless (equal? (run-3-prog '(* 5)) 5)
	      (printf "failed: (run-3-prog '(* 5))\n"))
      (unless (equal? (run-3-prog '(* 5 2 1)) 10)
	      (printf "failed: (run-3-prog '(* 5 2 1))\n"))
      (unless (equal? (run-3-prog '(* 5 2 100 0)) 0)
	      (printf "failed: (run-3-prog '(* 5 2 100 0))\n"))
      (unless (equal? (run-3-prog '(/ 5)) 1/5)
	      (printf "failed: (run-3-prog '(/ 5))\n"))
      (unless (equal? (run-3-prog '(/ 10 5)) 2)
	      (printf "failed: (run-3-prog '(/ 10 5))\n"))
      (unless (equal? (run-3-prog '(/ 1000 20 5)) 10)
	      (printf "failed: (run-3-prog '(/ 1000 20 5))\n"))
      ;;; Testing for scheme list primitives
      (unless (equal? (run-3-prog '(car (cons 1 2))) 1)
	      (printf "failed: (run-3-prog '(car (cons 1 2)))\n"))
      (unless (equal? (run-3-prog '(cdr (cons 1 2))) '2)
	      (printf "failed: (run-3-prog '(cdr (cons 1 2)))\n"))
      (unless (equal? (run-3-prog '(car '(1 2))) 1)
	      (printf "failed: (run-3-prog '(car '(1 2)))\n"))
      (unless (equal? (run-3-prog '(cdr '(1 2))) '(2))
	      (printf "failed: (run-3-prog '(cdr '(1 2)))\n"))
      (unless (equal? (run-3-prog '(list 1 2 3)) '(1 2 3))
	      (printf "failed: (run-3-prog '(list 1 2 3))\n"))
      (unless (equal? (run-3-prog '(list (list 1 2 3))) '((1 2 3)))
	      (printf "failed: (run-3-prog '(list (list 1 2 3)))\n"))
      ;;; Testing for call/cc
      (unless (equal? (run-3-prog '(+ 5 (call/cc (lambda (k) 10)))) 15)
	      (printf "failed: (run-3-prog '(+ 5 (call/cc (lambda (k) 10))))\n"))
      (unless (equal? (run-3-prog '(+ 5 (call/cc (lambda (k) (k 10))))) 15)
	      (printf "failed: (run-3-prog '(+ 5 (call/cc (lambda (k) (k 10)))))\n"))
      (unless (equal? (run-3-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0))))) 15)
	      (printf "failed: (run-3-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0)))))\n"))
      (unless (equal? (run-3-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25)))))) 2)
	      (printf "failed: (run-3-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25))))))\n"))
      ;;; Testing for simple cases of apply
      (unless (equal? (run-3-prog '(apply + '(1 2 3))) 6)
	      (printf "failed: (run-3-prog '(apply + '(1 2 3)))\n"))
      (unless (equal? (run-3-prog '(apply (lambda (x) x) '(10))) 10)
	      (printf "failed: (run-3-prog '(apply (lambda (x) x) '(10)))\n"))
      (unless (equal? (run-3-prog '(apply * '(10 5 -1))) -50)
	      (printf "failed: (run-3-prog '(apply * '(10 5 -1)))\n"))
      (unless (equal? (run-3-prog '(apply (lambda () 1) '())) 1)
	      (printf "failed: (run-3-prog '(apply (lambda () 1) '()))\n"))
      ;;; Testing for more complex cases of apply
      (unless (equal? (run-3-prog '(apply apply (list + (list 5 3 1)))) 9)
	      (printf "failed: (run-3-prog '(apply apply (list + (list 5 3 1))))\n"))
      (unless (equal? (run-3-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20)))) 31)
	      (printf "failed: (run-3-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20))))\n"))
      (unless (equal? (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) 10))))) 11)
	      (printf "failed: (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) 10)))))\n"))
      (unless (equal? (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10)))))) 11)
	      (printf "failed: (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10))))))\n"))
      (unless (equal? (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0)))))) 11)
	      (printf "failed: (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0))))))\n"))
      ;;; Testing for letrec expressions

      ;; Testing using factorial function
      (unless (equal? (run-3-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5))) 120)
	      (printf "failed: (run-3-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5)))\n"))
      (unless (equal? (run-3-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7))) 5040)
	      (printf "failed: (run-3-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #t
      (unless (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 12))) #t)
	      (printf "failed: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 12)))\n"))
      (unless (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 5))) #t)
	      (printf "failed: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 5)))\n"))
      (unless (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 31))) #t)
	      (printf "failed: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 31)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #f
      (unless (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 10))) #f)
	      (printf "failed: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 10)))\n"))
      (unless (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 21))) #f)
	      (printf "failed: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 21)))\n"))
      (unless (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 20))) #f)
	      (printf "failed: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 20)))\n"))
      
      ;; Testing using even odd where result is expected to be #t
      (unless (equal? (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (even 10))) #t)
	      (printf "failed: (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 10)))\n"))
      (unless (equal? (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (odd 7))) #t)
	      (printf "failed: (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 7)))\n"))

      ;; Testing using even odd where result is expected to be #f
      (unless (equal? (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (even 9))) #f)
	      (printf "failed: (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 9)))\n"))
      (unless (equal? (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (odd 6))) #f)
	      (printf "failed: (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 6)))\n"))
      )))

;;; "verbose" version that prints out messages if test is fine. Hence, no error messages means that tests are NOT fine
(define test-verbose-run-3-prog
  (lambda ()
    (begin
      ;;; Testing for base values
      (when   (equal? (run-3-prog 0) 0)
	      (printf "succeeded: (run-3-prog 0)\n"))
      (when   (equal? (run-3-prog '#f) #f)
	      (printf "succeeded: (run-3-prog '#f)\n"))
      (when   (equal? (run-3-prog '#\f) #\f)
	      (printf "succeeded: (run-3-prog '#\f)\n"))
      (when   (equal? (run-3-prog "scheme_capstone") "scheme_capstone")
	      (printf "succeeded: (run-3-prog \"scheme_capstone\")\n"))
      (when   (equal? (run-3-prog '()) '())
	      (printf "succeeded: (run-3-prog '())\n"))
      ;;; Testing for if expressions
      (when   (equal? (run-3-prog '(if #t 1 2)) 1)
	      (printf "succeeded: (run-3-prog (if #t 1 2))\n"))
      (when   (equal? (run-3-prog '(if #f 1 2)) 2)
	      (printf "succeeded: (run-3-prog (if #f 1 2))\n"))
      (when   (equal? (run-3-prog '(if 0 1 2)) 1)
	      (printf "succeeded: (run-3-prog (if 0 1 2))\n"))
      (when   (equal? (run-3-prog '((lambda (x) x) 1)) 1)
	      (printf "succeeded: (run-3-prog '((lambda (x) x) 1))\n"))
      ;;; Testing for lambda expressions
      (when   (equal? (run-3-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "succeeded: (run-3-prog '((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-3-prog '((lambda (x y) x) 1 2)) 1)
	      (printf "succeeded: (run-3-prog ((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-3-prog '((lambda (x y) y) 1 2)) 2)
	      (printf "succeeded: (run-3-prog ((lambda (x y) y) 1 2))\n"))
      (when   (equal? (run-3-prog '((lambda xs xs) 1 2)) '(1 2))
	      (printf "succeeded: (run-3-prog '((lambda xs xs) 1 2))\n"))
      (when   (equal? (run-3-prog '((lambda (x . xs) xs) 1 2 3)) '(2 3))
	      (printf "succeeded: (run-3-prog '((lambda (x . xs) xs) 1 2 3))\n"))
      ;;; Testing for let expressions
      (when   (equal? (run-3-prog '(let () 2)) 2)
	      (printf "succeeded: (run-3-prog '(let () 2))\n"))
      (when   (equal? (run-3-prog '(let ((x 1)) x)) 1)
	      (printf "succeeded: (run-3-prog '(let ((x 1)) x))\n"))
      (when   (equal? (run-3-prog '(let ((x 1) (y 2)) x)) 1)
	      (printf "succeeded: (run-3-prog '(let ((x 1) (y 2)) x))\n"))
      (when   (equal? (run-3-prog '(let ((x 1) (y 2)) y)) 2)
	      (printf "succeeded: (run-3-prog '(let ((x 1) (y 2)) y))\n"))
      ;;; Testing for quote expressions and nested quote expressions
      (when   (equal? (run-3-prog ''(if #t 1 2)) '(if #t 1 2))
	      (printf "succeeded: (run-3-prog '('(if #t 1 2)))\n"))
      (when   (equal? (run-3-prog ''((lambda (x y) x) 1 2))'((lambda (x y) x) 1 2))
	      (printf "succeeded: (run-3-prog ''((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-3-prog '''(if #t 1 2)) ''(if #t 1 2))
	      (printf "succeeded: (run-3-prog '''(if #t 1 2))\n"))
      (when   (equal? (run-3-prog '''((lambda (x y) x) 1 2))''((lambda (x y) x) 1 2))
	      (printf "succeeded: (run-3-prog '''((lambda (x y) x) 1 2))\n"))
      ;;; Testing for cond expression
      (when   (equal? (run-3-prog '(cond (#t 3)(#f 4)(else 1))) 3)
	      (printf "succeeded: (run-3-prog '(cond (#t 3)(#f 4)(else 1)))\n"))
      (when   (equal? (run-3-prog '(cond (#f 3)((equal? 5 5) 4)(else 1))) 4)
	      (printf "succeeded: (run-3-prog '(cond (#f 3)((equal? 5 5) 4)(else 1)))\n"))
      (when   (equal? (run-3-prog '(cond (#t 3)((equal? 5 5) 4)(else 1))) 3)
	      (printf "succeeded: (run-3-prog '(cond (#t 3)((equal? 5 5) 4)(else 1)))\n"))
      (when   (equal? (run-3-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9))) 1)
	      (printf "succeeded: (run-3-prog '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9)))\n"))
      (when   (equal? (run-3-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9)))) 90)
	      (printf "succeeded: (run-3-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9))))\n"))
      (when   (equal? (run-3-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9))) 9)
	      (printf "succeeded: (run-3-prog '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9)))\n"))
      (when   (equal? (run-3-prog '(cond (else 2))) '2)
	      (printf "succeeded: (run-3-prog '(cond (else 2)))\n"))
      ;;; Testing for mathematical operator primitives
      (when   (equal? (run-3-prog '(+)) 0)
	      (printf "succeeded: (run-3-prog '(+))\n"))
      (when   (equal? (run-3-prog '(+ 1)) 1)
	      (printf "succeeded: (run-3-prog '(+ 1))\n"))
      (when   (equal? (run-3-prog '(+ 1 10)) 11)
	      (printf "succeeded: (run-3-prog '(+ 1 10))\n"))
      (when   (equal? (run-3-prog '(+ 1 10 100)) 111)
	      (printf "succeeded: (run-3-prog '(+ 1 10 100))\n"))
      (when   (equal? (run-3-prog '(- 5)) -5)
	      (printf "succeeded: (run-3-prog '(- 5))\n"))
      (when   (equal? (run-3-prog '(- 5 1 2)) 2)
	      (printf "succeeded: (run-3-prog '(- 5 1 2))\n"))
      (when   (equal? (run-3-prog '(*)) 1)
	      (printf "succeeded: (run-3-prog '(*))\n"))
      (when   (equal? (run-3-prog '(* 5)) 5)
	      (printf "succeeded: (run-3-prog '(* 5))\n"))
      (when   (equal? (run-3-prog '(* 5 2 1)) 10)
	      (printf "succeeded: (run-3-prog '(* 5 2 1))\n"))
      (when   (equal? (run-3-prog '(* 5 2 100 0)) 0)
	      (printf "succeeded: (run-3-prog '(* 5 2 100 0))\n"))
      (when   (equal? (run-3-prog '(/ 5)) 1/5)
	      (printf "succeeded: (run-3-prog '(/ 5))\n"))
      (when   (equal? (run-3-prog '(/ 10 5)) 2)
	      (printf "succeeded: (run-3-prog '(/ 10 5))\n"))
      (when   (equal? (run-3-prog '(/ 1000 20 5)) 10)
	      (printf "succeeded: (run-3-prog '(/ 1000 20 5))\n"))
      ;;; Testing for scheme list primitives
      (when   (equal? (run-3-prog '(car (cons 1 2))) 1)
	      (printf "succeeded: (run-3-prog '(car (cons 1 2)))\n"))
      (when   (equal? (run-3-prog '(cdr (cons 1 2))) '2)
	      (printf "succeeded: (run-3-prog '(cdr (cons 1 2)))\n"))
      (when   (equal? (run-3-prog '(car '(1 2))) 1)
	      (printf "succeeded: (run-3-prog '(car '(1 2)))\n"))
      (when   (equal? (run-3-prog '(cdr '(1 2))) '(2))
	      (printf "succeeded: (run-3-prog '(cdr '(1 2)))\n"))
      (when   (equal? (run-3-prog '(list 1 2 3)) '(1 2 3))
	      (printf "succeeded: (run-3-prog '(list 1 2 3))\n"))
      (when   (equal? (run-3-prog '(list (list 1 2 3))) '((1 2 3)))
	      (printf "succeeded: (run-3-prog '(list (list 1 2 3)))\n"))
      ;;; Testing for call/cc
      (when   (equal? (run-3-prog '(+ 5 (call/cc (lambda (k) 10)))) 15)
	      (printf "succeeded: (run-3-prog '(+ 5 (call/cc (lambda (k) 10))))\n"))
      (when   (equal? (run-3-prog '(+ 5 (call/cc (lambda (k) (k 10))))) 15)
	      (printf "succeeded: (run-3-prog '(+ 5 (call/cc (lambda (k) (k 10)))))\n"))
      (when   (equal? (run-3-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0))))) 15)
	      (printf "succeeded: (run-3-prog '(+ 5 (call/cc (lambda (k) (/ (k 10) 0)))))\n"))
      (when   (equal? (run-3-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25)))))) 2)
	      (printf "succeeded: (run-3-prog '(/ 50 (call/cc (lambda (k) (+ 0 (k 25))))))\n"))
      ;;; Testing for simple cases of apply
      (when   (equal? (run-3-prog '(apply + '(1 2 3))) 6)
	      (printf "succeeded: (run-3-prog '(apply + '(1 2 3)))\n"))
      (when   (equal? (run-3-prog '(apply (lambda (x) x) '(10))) 10)
	      (printf "succeeded: (run-3-prog '(apply (lambda (x) x) '(10)))\n"))
      (when   (equal? (run-3-prog '(apply * '(10 5 -1))) -50)
	      (printf "succeeded: (run-3-prog '(apply * '(10 5 -1)))\n"))
      (when   (equal? (run-3-prog '(apply (lambda () 1) '())) 1)
	      (printf "succeeded: (run-3-prog '(apply (lambda () 1) '()))\n"))
      ;;; Testing for more complex cases of apply
      (when   (equal? (run-3-prog '(apply apply (list + (list 5 3 1)))) 9)
	      (printf "succeeded: (run-3-prog '(apply apply (list + (list 5 3 1))))\n"))
      (when   (equal? (run-3-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20)))) 31)
	      (printf "succeeded: (run-3-prog '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20))))\n"))
      (when   (equal? (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) 10))))) 11)
	      (printf "succeeded: (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) 10)))))\n"))
      (when   (equal? (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10)))))) 11)
	      (printf "succeeded: (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) (k 10))))))\n"))
      (when   (equal? (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0)))))) 11)
	      (printf "succeeded: (run-3-prog '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0))))))\n"))
      ;;; Testing for letrec expressions

      ;; Testing using factorial function
      (when   (equal? (run-3-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5))) 120)
	      (printf "succeeded: (run-3-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5)))\n"))
      (when   (equal? (run-3-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7))) 5040)
	      (printf "succeeded: (run-3-prog '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #t
      (when   (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 12))) #t)
	      (printf "succeeded: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 12)))\n"))
      (when   (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 5))) #t)
	      (printf "succeeded: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 5)))\n"))
      (when   (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 31))) #t)
	      (printf "succeeded: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 31)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #f
      (when   (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 10))) #f)
	      (printf "succeeded: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 10)))\n"))
      (when   (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 21))) #f)
	      (printf "succeeded: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 21)))\n"))
      (when   (equal? (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 20))) #f)
	      (printf "succeeded: (run-3-prog '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 20)))\n"))

      ;; Testing using even odd where result is expected to be #t
      (when   (equal? (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (even 10))) #t)
	      (printf "succeeded: (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 10)))\n"))
      (when   (equal? (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (odd 7))) #t)
	      (printf "succeeded: (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 7)))\n"))

      ;; Testing using even odd where result is expected to be #f
      (when (equal? (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (even 9))) #f)
	    (printf "succeeded: (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 9)))\n"))
      (when (equal? (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (odd 6))) #f)
	    (printf "succeeded: (run-3-prog '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 6)))\n"))
      )))

;;; Defining tests for run-3-prog defined using (run-star-prog-qq 3)

;;; normal version
(define test-run-3-prog-alt
  (lambda ()
    (begin
      ;;; Testing for base values
      (unless (equal? (run-star-prog-qq 3 0) 0)
	      (printf "failed: (run-star-prog-qq 3 0)\n"))
      (unless (equal? (run-star-prog-qq 3 '#f) #f)
	      (printf "failed: (run-star-prog-qq 3 '#f)\n"))
      (unless (equal? (run-star-prog-qq 3 '#\f) #\f)
	      (printf "failed: (run-star-prog-qq 3 '#\f)\n"))
      (unless (equal? (run-star-prog-qq 3 "scheme_capstone") "scheme_capstone")
	      (printf "failed: (run-star-prog-qq 3 \"scheme_capstone\")\n"))
      (unless (equal? (run-star-prog-qq 3 '()) '())
	      (printf "failed: (run-star-prog-qq 3 '())\n"))
      ;;; Testing for if expressions
      (unless (equal? (run-star-prog-qq 3 '(if #t 1 2)) 1)
	      (printf "failed: (run-star-prog-qq 3 (if #t 1 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '(if #f 1 2)) 2)
	      (printf "failed: (run-star-prog-qq 3 (if #f 1 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '(if 0 1 2)) 1)
	      (printf "failed: (run-star-prog-qq 3 (if 0 1 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '((lambda (x) x) 1)) 1)
	      (printf "failed: (run-star-prog-qq 3 '((lambda (x) x) 1))\n"))
      ;;; Testing for lambda expressions
      (unless (equal? (run-star-prog-qq 3 '((lambda (x y) x) 1 2)) 1)
	      (printf "failed: (run-star-prog-qq 3 '((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '((lambda (x y) x) 1 2)) 1)
	      (printf "failed: (run-star-prog-qq 3 ((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '((lambda (x y) y) 1 2)) 2)
	      (printf "failed: (run-star-prog-qq 3 ((lambda (x y) y) 1 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '((lambda xs xs) 1 2)) '(1 2))
	      (printf "failed: (run-star-prog-qq 3 '((lambda xs xs) 1 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '((lambda (x . xs) xs) 1 2 3)) '(2 3))
	      (printf "failed: (run-star-prog-qq 3 '((lambda (x . xs) xs) 1 2 3))\n"))
      ;;; Testing for let expressions
      (unless (equal? (run-star-prog-qq 3 '(let () 2)) 2)
	      (printf "failed: (run-star-prog-qq 3 '(let () 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '(let ((x 1)) x)) 1)
	      (printf "failed: (run-star-prog-qq 3 '(let ((x 1)) x))\n"))
      (unless (equal? (run-star-prog-qq 3 '(let ((x 1) (y 2)) x)) 1)
	      (printf "failed: (run-star-prog-qq 3 '(let ((x 1) (y 2)) x))\n"))
      (unless (equal? (run-star-prog-qq 3 '(let ((x 1) (y 2)) y)) 2)
	      (printf "failed: (run-star-prog-qq 3 '(let ((x 1) (y 2)) y))\n"))
      ;;; Testing for quote expressions and nested quote expressions
      (unless (equal? (run-star-prog-qq 3 ''(if #t 1 2)) '(if #t 1 2))
	      (printf "failed: (run-star-prog-qq 3 '('(if #t 1 2)))\n"))
      (unless (equal? (run-star-prog-qq 3 ''((lambda (x y) x) 1 2))'((lambda (x y) x) 1 2))
	      (printf "failed: (run-star-prog-qq 3 ''((lambda (x y) x) 1 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '''(if #t 1 2)) ''(if #t 1 2))
	      (printf "failed: (run-star-prog-qq 3 '''(if #t 1 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '''((lambda (x y) x) 1 2))''((lambda (x y) x) 1 2))
	      (printf "failed: (run-star-prog-qq 3 '''((lambda (x y) x) 1 2))\n"))
      ;;; Testing for cond expression
      (unless (equal? (run-star-prog-qq 3 '(cond (#t 3)(#f 4)(else 1))) 3)
	      (printf "failed: (run-star-prog-qq 3 '(cond (#t 3)(#f 4)(else 1)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 5) 4)(else 1))) 4)
	      (printf "failed: (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 5) 4)(else 1)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(cond (#t 3)((equal? 5 5) 4)(else 1))) 3)
	      (printf "failed: (run-star-prog-qq 3 '(cond (#t 3)((equal? 5 5) 4)(else 1)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9))) 1)
	      (printf "failed: (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9)))) 90)
	      (printf "failed: (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9))))\n"))
      (unless (equal? (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9))) 9)
	      (printf "failed: (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(cond (else 2))) '2)
	      (printf "failed: (run-star-prog-qq 3 '(cond (else 2)))\n"))
      ;;; Testing for mathematical operator primitives
      (unless (equal? (run-star-prog-qq 3 '(+)) 0)
	      (printf "failed: (run-star-prog-qq 3 '(+))\n"))
      (unless (equal? (run-star-prog-qq 3 '(+ 1)) 1)
	      (printf "failed: (run-star-prog-qq 3 '(+ 1))\n"))
      (unless (equal? (run-star-prog-qq 3 '(+ 1 10)) 11)
	      (printf "failed: (run-star-prog-qq 3 '(+ 1 10))\n"))
      (unless (equal? (run-star-prog-qq 3 '(+ 1 10 100)) 111)
	      (printf "failed: (run-star-prog-qq 3 '(+ 1 10 100))\n"))
      (unless (equal? (run-star-prog-qq 3 '(- 5)) -5)
	      (printf "failed: (run-star-prog-qq 3 '(- 5))\n"))
      (unless (equal? (run-star-prog-qq 3 '(- 5 1 2)) 2)
	      (printf "failed: (run-star-prog-qq 3 '(- 5 1 2))\n"))
      (unless (equal? (run-star-prog-qq 3 '(*)) 1)
	      (printf "failed: (run-star-prog-qq 3 '(*))\n"))
      (unless (equal? (run-star-prog-qq 3 '(* 5)) 5)
	      (printf "failed: (run-star-prog-qq 3 '(* 5))\n"))
      (unless (equal? (run-star-prog-qq 3 '(* 5 2 1)) 10)
	      (printf "failed: (run-star-prog-qq 3 '(* 5 2 1))\n"))
      (unless (equal? (run-star-prog-qq 3 '(* 5 2 100 0)) 0)
	      (printf "failed: (run-star-prog-qq 3 '(* 5 2 100 0))\n"))
      (unless (equal? (run-star-prog-qq 3 '(/ 5)) 1/5)
	      (printf "failed: (run-star-prog-qq 3 '(/ 5))\n"))
      (unless (equal? (run-star-prog-qq 3 '(/ 10 5)) 2)
	      (printf "failed: (run-star-prog-qq 3 '(/ 10 5))\n"))
      (unless (equal? (run-star-prog-qq 3 '(/ 1000 20 5)) 10)
	      (printf "failed: (run-star-prog-qq 3 '(/ 1000 20 5))\n"))
      ;;; Testing for scheme list primitives
      (unless (equal? (run-star-prog-qq 3 '(car (cons 1 2))) 1)
	      (printf "failed: (run-star-prog-qq 3 '(car (cons 1 2)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(cdr (cons 1 2))) '2)
	      (printf "failed: (run-star-prog-qq 3 '(cdr (cons 1 2)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(car '(1 2))) 1)
	      (printf "failed: (run-star-prog-qq 3 '(car '(1 2)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(cdr '(1 2))) '(2))
	      (printf "failed: (run-star-prog-qq 3 '(cdr '(1 2)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(list 1 2 3)) '(1 2 3))
	      (printf "failed: (run-star-prog-qq 3 '(list 1 2 3))\n"))
      (unless (equal? (run-star-prog-qq 3 '(list (list 1 2 3))) '((1 2 3)))
	      (printf "failed: (run-star-prog-qq 3 '(list (list 1 2 3)))\n"))
      ;;; Testing for call/cc
      (unless (equal? (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) 10)))) 15)
	      (printf "failed: (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) 10))))\n"))
      (unless (equal? (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) (k 10))))) 15)
	      (printf "failed: (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) (k 10)))))\n"))
      (unless (equal? (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) (/ (k 10) 0))))) 15)
	      (printf "failed: (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) (/ (k 10) 0)))))\n"))
      (unless (equal? (run-star-prog-qq 3 '(/ 50 (call/cc (lambda (k) (+ 0 (k 25)))))) 2)
	      (printf "failed: (run-star-prog-qq 3 '(/ 50 (call/cc (lambda (k) (+ 0 (k 25))))))\n"))
      ;;; Testing for simple cases of apply
      (unless (equal? (run-star-prog-qq 3 '(apply + '(1 2 3))) 6)
	      (printf "failed: (run-star-prog-qq 3 '(apply + '(1 2 3)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(apply (lambda (x) x) '(10))) 10)
	      (printf "failed: (run-star-prog-qq 3 '(apply (lambda (x) x) '(10)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(apply * '(10 5 -1))) -50)
	      (printf "failed: (run-star-prog-qq 3 '(apply * '(10 5 -1)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(apply (lambda () 1) '())) 1)
	      (printf "failed: (run-star-prog-qq 3 '(apply (lambda () 1) '()))\n"))
      ;;; Testing for more complex cases of apply
      (unless (equal? (run-star-prog-qq 3 '(apply apply (list + (list 5 3 1)))) 9)
	      (printf "failed: (run-star-prog-qq 3 '(apply apply (list + (list 5 3 1))))\n"))
      (unless (equal? (run-star-prog-qq 3 '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20)))) 31)
	      (printf "failed: (run-star-prog-qq 3 '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20))))\n"))
      (unless (equal? (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) 10))))) 11)
	      (printf "failed: (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) 10)))))\n"))
      (unless (equal? (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) (k 10)))))) 11)
	      (printf "failed: (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) (k 10))))))\n"))
      (unless (equal? (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0)))))) 11)
	      (printf "failed: (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0))))))\n"))
      ;;; Testing for letrec expressions

      ;; Testing using factorial function
      (unless (equal? (run-star-prog-qq 3 '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5))) 120)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7))) 5040)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #t
      (unless (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 12))) #t)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 12)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 5))) #t)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 5)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 31))) #t)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 31)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #f
      (unless (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 10))) #f)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 10)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 21))) #f)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 21)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 20))) #f)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 20)))\n"))
      
      ;; Testing using even odd where result is expected to be #t
      (unless (equal? (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (even 10))) #t)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 10)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (odd 7))) #t)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 7)))\n"))

      ;; Testing using even odd where result is expected to be #f
      (unless (equal? (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (even 9))) #f)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 9)))\n"))
      (unless (equal? (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (odd 6))) #f)
	      (printf "failed: (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 6)))\n"))
      )))

;;; "verbose" version that prints out messages if test is fine. Hence, no error messages means that tests are NOT fine
(define test-verbose-run-3-prog-alt
  (lambda ()
    (begin
      ;;; Testing for base values
      (when   (equal? (run-star-prog-qq 3 0) 0)
	      (printf "succeeded: (run-star-prog-qq 3 0)\n"))
      (when   (equal? (run-star-prog-qq 3 '#f) #f)
	      (printf "succeeded: (run-star-prog-qq 3 '#f)\n"))
      (when   (equal? (run-star-prog-qq 3 '#\f) #\f)
	      (printf "succeeded: (run-star-prog-qq 3 '#\f)\n"))
      (when   (equal? (run-star-prog-qq 3 "scheme_capstone") "scheme_capstone")
	      (printf "succeeded: (run-star-prog-qq 3 \"scheme_capstone\")\n"))
      (when   (equal? (run-star-prog-qq 3 '()) '())
	      (printf "succeeded: (run-star-prog-qq 3 '())\n"))
      ;;; Testing for if expressions
      (when   (equal? (run-star-prog-qq 3 '(if #t 1 2)) 1)
	      (printf "succeeded: (run-star-prog-qq 3 (if #t 1 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '(if #f 1 2)) 2)
	      (printf "succeeded: (run-star-prog-qq 3 (if #f 1 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '(if 0 1 2)) 1)
	      (printf "succeeded: (run-star-prog-qq 3 (if 0 1 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '((lambda (x) x) 1)) 1)
	      (printf "succeeded: (run-star-prog-qq 3 '((lambda (x) x) 1))\n"))
      ;;; Testing for lambda expressions
      (when   (equal? (run-star-prog-qq 3 '((lambda (x y) x) 1 2)) 1)
	      (printf "succeeded: (run-star-prog-qq 3 '((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '((lambda (x y) x) 1 2)) 1)
	      (printf "succeeded: (run-star-prog-qq 3 ((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '((lambda (x y) y) 1 2)) 2)
	      (printf "succeeded: (run-star-prog-qq 3 ((lambda (x y) y) 1 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '((lambda xs xs) 1 2)) '(1 2))
	      (printf "succeeded: (run-star-prog-qq 3 '((lambda xs xs) 1 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '((lambda (x . xs) xs) 1 2 3)) '(2 3))
	      (printf "succeeded: (run-star-prog-qq 3 '((lambda (x . xs) xs) 1 2 3))\n"))
      ;;; Testing for let expressions
      (when   (equal? (run-star-prog-qq 3 '(let () 2)) 2)
	      (printf "succeeded: (run-star-prog-qq 3 '(let () 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '(let ((x 1)) x)) 1)
	      (printf "succeeded: (run-star-prog-qq 3 '(let ((x 1)) x))\n"))
      (when   (equal? (run-star-prog-qq 3 '(let ((x 1) (y 2)) x)) 1)
	      (printf "succeeded: (run-star-prog-qq 3 '(let ((x 1) (y 2)) x))\n"))
      (when   (equal? (run-star-prog-qq 3 '(let ((x 1) (y 2)) y)) 2)
	      (printf "succeeded: (run-star-prog-qq 3 '(let ((x 1) (y 2)) y))\n"))
      ;;; Testing for quote expressions and nested quote expressions
      (when   (equal? (run-star-prog-qq 3 ''(if #t 1 2)) '(if #t 1 2))
	      (printf "succeeded: (run-star-prog-qq 3 '('(if #t 1 2)))\n"))
      (when   (equal? (run-star-prog-qq 3 ''((lambda (x y) x) 1 2))'((lambda (x y) x) 1 2))
	      (printf "succeeded: (run-star-prog-qq 3 ''((lambda (x y) x) 1 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '''(if #t 1 2)) ''(if #t 1 2))
	      (printf "succeeded: (run-star-prog-qq 3 '''(if #t 1 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '''((lambda (x y) x) 1 2))''((lambda (x y) x) 1 2))
	      (printf "succeeded: (run-star-prog-qq 3 '''((lambda (x y) x) 1 2))\n"))
      ;;; Testing for cond expression
      (when   (equal? (run-star-prog-qq 3 '(cond (#t 3)(#f 4)(else 1))) 3)
	      (printf "succeeded: (run-star-prog-qq 3 '(cond (#t 3)(#f 4)(else 1)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 5) 4)(else 1))) 4)
	      (printf "succeeded: (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 5) 4)(else 1)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(cond (#t 3)((equal? 5 5) 4)(else 1))) 3)
	      (printf "succeeded: (run-star-prog-qq 3 '(cond (#t 3)((equal? 5 5) 4)(else 1)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9))) 1)
	      (printf "succeeded: (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 5) (- 5 3 1))(else 9)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9)))) 90)
	      (printf "succeeded: (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else (* 10 9))))\n"))
      (when   (equal? (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9))) 9)
	      (printf "succeeded: (run-star-prog-qq 3 '(cond (#f 3)((equal? 5 4) (- 5 3 1))(else 9)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(cond (else 2))) '2)
	      (printf "succeeded: (run-star-prog-qq 3 '(cond (else 2)))\n"))
      ;;; Testing for mathematical operator primitives
      (when   (equal? (run-star-prog-qq 3 '(+)) 0)
	      (printf "succeeded: (run-star-prog-qq 3 '(+))\n"))
      (when   (equal? (run-star-prog-qq 3 '(+ 1)) 1)
	      (printf "succeeded: (run-star-prog-qq 3 '(+ 1))\n"))
      (when   (equal? (run-star-prog-qq 3 '(+ 1 10)) 11)
	      (printf "succeeded: (run-star-prog-qq 3 '(+ 1 10))\n"))
      (when   (equal? (run-star-prog-qq 3 '(+ 1 10 100)) 111)
	      (printf "succeeded: (run-star-prog-qq 3 '(+ 1 10 100))\n"))
      (when   (equal? (run-star-prog-qq 3 '(- 5)) -5)
	      (printf "succeeded: (run-star-prog-qq 3 '(- 5))\n"))
      (when   (equal? (run-star-prog-qq 3 '(- 5 1 2)) 2)
	      (printf "succeeded: (run-star-prog-qq 3 '(- 5 1 2))\n"))
      (when   (equal? (run-star-prog-qq 3 '(*)) 1)
	      (printf "succeeded: (run-star-prog-qq 3 '(*))\n"))
      (when   (equal? (run-star-prog-qq 3 '(* 5)) 5)
	      (printf "succeeded: (run-star-prog-qq 3 '(* 5))\n"))
      (when   (equal? (run-star-prog-qq 3 '(* 5 2 1)) 10)
	      (printf "succeeded: (run-star-prog-qq 3 '(* 5 2 1))\n"))
      (when   (equal? (run-star-prog-qq 3 '(* 5 2 100 0)) 0)
	      (printf "succeeded: (run-star-prog-qq 3 '(* 5 2 100 0))\n"))
      (when   (equal? (run-star-prog-qq 3 '(/ 5)) 1/5)
	      (printf "succeeded: (run-star-prog-qq 3 '(/ 5))\n"))
      (when   (equal? (run-star-prog-qq 3 '(/ 10 5)) 2)
	      (printf "succeeded: (run-star-prog-qq 3 '(/ 10 5))\n"))
      (when   (equal? (run-star-prog-qq 3 '(/ 1000 20 5)) 10)
	      (printf "succeeded: (run-star-prog-qq 3 '(/ 1000 20 5))\n"))
      ;;; Testing for scheme list primitives
      (when   (equal? (run-star-prog-qq 3 '(car (cons 1 2))) 1)
	      (printf "succeeded: (run-star-prog-qq 3 '(car (cons 1 2)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(cdr (cons 1 2))) '2)
	      (printf "succeeded: (run-star-prog-qq 3 '(cdr (cons 1 2)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(car '(1 2))) 1)
	      (printf "succeeded: (run-star-prog-qq 3 '(car '(1 2)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(cdr '(1 2))) '(2))
	      (printf "succeeded: (run-star-prog-qq 3 '(cdr '(1 2)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(list 1 2 3)) '(1 2 3))
	      (printf "succeeded: (run-star-prog-qq 3 '(list 1 2 3))\n"))
      (when   (equal? (run-star-prog-qq 3 '(list (list 1 2 3))) '((1 2 3)))
	      (printf "succeeded: (run-star-prog-qq 3 '(list (list 1 2 3)))\n"))
      ;;; Testing for call/cc
      (when   (equal? (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) 10)))) 15)
	      (printf "succeeded: (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) 10))))\n"))
      (when   (equal? (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) (k 10))))) 15)
	      (printf "succeeded: (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) (k 10)))))\n"))
      (when   (equal? (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) (/ (k 10) 0))))) 15)
	      (printf "succeeded: (run-star-prog-qq 3 '(+ 5 (call/cc (lambda (k) (/ (k 10) 0)))))\n"))
      (when   (equal? (run-star-prog-qq 3 '(/ 50 (call/cc (lambda (k) (+ 0 (k 25)))))) 2)
	      (printf "succeeded: (run-star-prog-qq 3 '(/ 50 (call/cc (lambda (k) (+ 0 (k 25))))))\n"))
      ;;; Testing for simple cases of apply
      (when   (equal? (run-star-prog-qq 3 '(apply + '(1 2 3))) 6)
	      (printf "succeeded: (run-star-prog-qq 3 '(apply + '(1 2 3)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(apply (lambda (x) x) '(10))) 10)
	      (printf "succeeded: (run-star-prog-qq 3 '(apply (lambda (x) x) '(10)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(apply * '(10 5 -1))) -50)
	      (printf "succeeded: (run-star-prog-qq 3 '(apply * '(10 5 -1)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(apply (lambda () 1) '())) 1)
	      (printf "succeeded: (run-star-prog-qq 3 '(apply (lambda () 1) '()))\n"))
      ;;; Testing for more complex cases of apply
      (when   (equal? (run-star-prog-qq 3 '(apply apply (list + (list 5 3 1)))) 9)
	      (printf "succeeded: (run-star-prog-qq 3 '(apply apply (list + (list 5 3 1))))\n"))
      (when   (equal? (run-star-prog-qq 3 '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20)))) 31)
	      (printf "succeeded: (run-star-prog-qq 3 '(apply apply (list (lambda (a b) (+ a (+ b 1))) (list 10 20))))\n"))
      (when   (equal? (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) 10))))) 11)
	      (printf "succeeded: (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) 10)))))\n"))
      (when   (equal? (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) (k 10)))))) 11)
	      (printf "succeeded: (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) (k 10))))))\n"))
      (when   (equal? (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0)))))) 11)
	      (printf "succeeded: (run-star-prog-qq 3 '(+ 1 (apply call/cc (list (lambda (k) (/ (k 10) 0))))))\n"))
      ;;; Testing for letrec expressions

      ;; Testing using factorial function
      (when   (equal? (run-star-prog-qq 3 '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5))) 120)
	      (printf "succeeded: (run-star-prog-qq 3 '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 5)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7))) 5040)
	      (printf "succeeded: (run-star-prog-qq 3 '(letrec ((fac (lambda (n) (if (= n 0) 1 (* n (fac (- n 1))))))) (fac 7)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #t
      (when   (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 12))) #t)
	      (printf "succeeded: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 12)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 5))) #t)
	      (printf "succeeded: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 5)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 31))) #t)
	      (printf "succeeded: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 31)))\n"))
      
      ;; Testing using ternary preternary postternary where result is expected to be #f
      (when   (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (ternary 10))) #f)
	      (printf "succeeded: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(ternary 10)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (preternary 21))) #f)
	      (printf "succeeded: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(preternary 21)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))
					    (postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))
					    (preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))
				     (postternary 20))) #f)
	      (printf "succeeded: (run-star-prog-qq 3 '(letrec ((ternary (lambda (n) (if (= n 0) #t (preternary (- n 1)))))(postternary (lambda (n) (if (= n 0) #f (ternary (- n 1)))))(preternary (lambda (n) (if (= n 0) #f (postternary (- n 1))))))(postternary 20)))\n"))

      ;; Testing using even odd where result is expected to be #t
      (when   (equal? (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (even 10))) #t)
	      (printf "succeeded: (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 10)))\n"))
      (when   (equal? (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					    (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				     (odd 7))) #t)
	      (printf "succeeded: (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 7)))\n"))

      ;; Testing using even odd where result is expected to be #f
      (when (equal? (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (even 9))) #f)
	    (printf "succeeded: (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(even 9)))\n"))
      (when (equal? (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))
					  (odd (lambda (n) (if (= n 0) #f (even (- n 1))))))
				   (odd 6))) #f)
	    (printf "succeeded: (run-star-prog-qq 3 '(letrec ((even (lambda (n) (if (= n 0) #t (odd (- n 1)))))(odd (lambda (n) (if (= n 0) #t (even (- n 1))))))(odd 6)))\n"))
      )))
